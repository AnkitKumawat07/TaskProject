package com.TaskDemo.Task;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;

import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.TaskDemo.Entity.Task;
import com.TaskDemo.Repository.TaskRepository;
import com.TaskDemo.controller.TaskController;
import com.TaskDemo.service.taskService;
import com.fasterxml.jackson.databind.ObjectMapper;

import ch.qos.logback.core.net.ObjectWriter;
import static org.hamcrest.CoreMatchers.is;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.BDDMockito.*;
import static org.hamcrest.Matchers.*;
import org.mockito.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;



@RunWith(MockitoJUnitRunner.class)
public class TaskControllerApiTest {

	private MockMvc mockMvc;
	
	ObjectMapper objectMapper = new ObjectMapper();
	
	//ObjectWriter writer = (ObjectWriter) objectMapper.writer();
	
	@Mock
	private taskService taskservice;
	
	@InjectMocks
	private TaskController taskController;
	

	Task task1 = new Task(1L,"Task1","Task1 added",(short)2,new Date(),(short)4);
	Task task2 = new Task(1L,"Task2","Task2 added",(short)2,new Date(),(short)4);
	
	@Before
	public void setUp() {
		MockitoAnnotations.openMocks(this);
		this.mockMvc = MockMvcBuilders.standaloneSetup(taskController).build();
	}
	
	@Test
	public void getAllTaskTest_success()  throws Exception{
		List<Task> taskList = new ArrayList<>(Arrays.asList(task1,task2));
		
			Mockito.when(taskservice.findAllTasks()).thenReturn(taskList);
			System.out.println("COming");
		
		this.mockMvc.perform(MockMvcRequestBuilders
				.get("/tasks")
				.contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(MockMvcResultMatchers.jsonPath("$", hasSize(2)));
	}
	
	
}
