package com.TaskDemo.Task;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;

import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.TaskDemo.Entity.Task;
import com.TaskDemo.Repository.TaskRepository;
import com.TaskDemo.controller.TaskController;
import com.TaskDemo.service.taskService;
import com.TaskDemo.serviceImpl.taskServiceImplementation;
import com.fasterxml.jackson.databind.ObjectMapper;

import ch.qos.logback.core.net.ObjectWriter;
import static org.hamcrest.CoreMatchers.is;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.BDDMockito.*;
import static org.hamcrest.Matchers.*;
import org.mockito.Mock;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;




@ExtendWith(MockitoExtension.class) 
@WebMvcTest(TaskController.class)
public class TaskControllerApiTest {

    private MockMvc mockMvc;

    ObjectMapper objectMapper = new ObjectMapper();

    @Mock
    private taskService taskservice;

    @Mock
    private TaskRepository taskRepository;
    
    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private TaskController taskController;

    Task task1 = new Task(1L,"Task1","Task1 added",(short)2,new Date(),(short)4);
    Task task2 = new Task(1L,"Task2","Task2 added",(short)2,new Date(),(short)4);

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        this.mockMvc = MockMvcBuilders.standaloneSetup(taskController).build();
//        taskRepository = new TaskRepository(jdbcTemplate);
//        taskservice = new taskServiceImplementation(taskRepository);
    }

    @Test
    public void getAllTaskTest_success()  throws Exception{
        List<Task> taskList = new ArrayList<>(Arrays.asList(task1,task2));

        // Mocking behavior of taskService
		        when(taskservice.findAllTasks()).thenReturn(taskList);

        // Mocking behavior of taskRepository
        //when(taskRepository.findAllTasks()).thenReturn(taskList);

        mockMvc.perform(MockMvcRequestBuilders
                .get("/tasks")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$", hasSize(2)));
    }
}
